package ru.Ilnur.SimbirSoftTests;// Generated by Selenium IDE

import io.qameta.allure.Description;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import ru.Ilnur.Pages.CalculatorPage;
import ru.Ilnur.Pages.SearchPage;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class CalculatorTests {

    static CalculatorPage calculatorPage;
    static SearchPage searchPage;
    public static WebDriver driver = new ChromeDriver();


    @BeforeAll
    public static void setUp() {
        System.setProperty("webdriver.chrome.driver", ConfProperties.getProperty("chromedriver"));
        calculatorPage = new CalculatorPage(driver);
        searchPage = new SearchPage(driver);
        driver.manage().window().maximize();
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        driver.get(ConfProperties.getProperty("commonPage"));
        openCalculator();
    }

    public static void openCalculator() {
        searchPage.Field("Калькулятор");
        searchPage.search();
    }


    @AfterAll
    public static void tearDown() {
        driver.quit();
    }


    @Tag("positive")
    @Description("Проверка отображения формулы в истории действий")
    @Test
    public void checkHistoryDisplay() {
        calculatorPage.leftParenthesisB();
        calculatorPage.One();
        calculatorPage.plusB();
        calculatorPage.Two();
        calculatorPage.RightParenthesisB();
        calculatorPage.multiplyB();
        calculatorPage.Three();
        calculatorPage.minusB();
        calculatorPage.Fore();
        calculatorPage.Zero();
        calculatorPage.divideB();
        calculatorPage.Five();
        calculatorPage.equallyB();
        assertEquals(calculatorPage.historyField(), "(1 + 2) × 3 - 40 ÷ 5 =");
        assertEquals(calculatorPage.numberFieldB(), "1");
    }

    @Tag("negative")
    @Description("Проверка деления на ноль")
    @Test
    public void checkDivisionByZero() {
        calculatorPage.Six();
        calculatorPage.divideB();
        calculatorPage.Zero();
        calculatorPage.equallyB();
        assertEquals(calculatorPage.historyField(), "6 ÷ 0 =");
        assertEquals(calculatorPage.numberFieldB(), "Infinity");
    }

    @Tag("negative")
    @Description("Проверка отображения сообщения с ошибкой")
    @Test
    public void checkErrorMessage() {
        calculatorPage.Sin();
        calculatorPage.equallyB();
        assertEquals(calculatorPage.historyField(), "sin() =");
        assertEquals(calculatorPage.numberFieldB(), "Error");
    }
}
